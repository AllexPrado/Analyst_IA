#!/usr/bin/env python3
"""
Script para for√ßar atualiza√ß√£o do cache com debug detalhado
"""

import asyncio
import logging
import json
import os
import sys
from pathlib import Path
from datetime import datetime

# Configurar logging detalhado
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Adiciona o diret√≥rio atual ao path
sys.path.append(str(Path(__file__).parent))

async def force_cache_update():
    """For√ßa atualiza√ß√£o do cache com debug detalhado"""
    try:
        logger.info("=== FOR√áANDO ATUALIZA√á√ÉO DO CACHE ===")
        
        # Importa as fun√ß√µes necess√°rias
        from utils.cache import atualizar_cache_completo_avancado, _cache, salvar_cache_no_disco
        from utils.newrelic_collector import coletar_contexto_completo
        
        logger.info("‚úÖ M√≥dulos importados com sucesso")
        
        # Verifica se temos as credenciais
        from dotenv import load_dotenv
        load_dotenv()
        
        api_key = os.getenv('NEW_RELIC_API_KEY')
        account_id = os.getenv('NEW_RELIC_ACCOUNT_ID')
        
        logger.info(f"API Key presente: {'Sim' if api_key else 'N√£o'}")
        logger.info(f"Account ID: {account_id}")
        
        if not api_key or not account_id:
            logger.error("‚ùå Credenciais do New Relic n√£o encontradas!")
            return False
        
        # M√©todo 1: Tentar com coletor avan√ßado
        logger.info("üîÑ Tentando atualiza√ß√£o com coletor avan√ßado...")
        try:
            success = await atualizar_cache_completo_avancado()
            if success:
                logger.info("‚úÖ Atualiza√ß√£o com coletor avan√ßado bem-sucedida!")
                return True
            else:
                logger.warning("‚ö†Ô∏è Atualiza√ß√£o com coletor avan√ßado falhou")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erro no coletor avan√ßado: {e}")
        
        # M√©todo 2: Tentar com coletor padr√£o
        logger.info("üîÑ Tentando atualiza√ß√£o com coletor padr√£o...")
        try:
            resultado = await coletar_contexto_completo()
            logger.info(f"Resultado da coleta: {type(resultado)}")
            
            if resultado and isinstance(resultado, dict):
                logger.info(f"Chaves do resultado: {list(resultado.keys())}")
                
                entidades = resultado.get("entidades", [])
                logger.info(f"Total de entidades coletadas: {len(entidades)}")
                
                if entidades:
                    # Processa e filtra entidades
                    from utils.entity_processor import filter_entities_with_data
                    entidades_filtradas = filter_entities_with_data(entidades)
                    logger.info(f"Entidades ap√≥s filtro: {len(entidades_filtradas)}")
                    
                    # Atualiza cache manualmente
                    _cache["dados"] = {
                        "entidades": entidades_filtradas,
                        "timestamp": datetime.now().isoformat(),
                        "total_entidades": len(entidades_filtradas),
                        "contagem_por_dominio": {}
                    }
                    
                    # Contagem por dom√≠nio
                    dominios = {}
                    for e in entidades_filtradas:
                        domain = e.get("domain", "UNKNOWN")
                        dominios[domain] = dominios.get(domain, 0) + 1
                    
                    _cache["dados"]["contagem_por_dominio"] = dominios
                    
                    # Salva em disco
                    await salvar_cache_no_disco()
                    
                    logger.info("‚úÖ Cache atualizado manualmente!")
                    logger.info(f"Distribui√ß√£o por dom√≠nio: {dominios}")
                    return True
                else:
                    logger.error("‚ùå Nenhuma entidade foi coletada!")
                    return False
            else:
                logger.error("‚ùå Resultado da coleta inv√°lido!")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Erro no coletor padr√£o: {e}")
            import traceback
            logger.error(traceback.format_exc())
            return False
        
    except Exception as e:
        logger.error(f"‚ùå Erro cr√≠tico: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return False

async def verify_cache():
    """Verifica o estado atual do cache"""
    try:
        logger.info("=== VERIFICANDO ESTADO DO CACHE ===")
        
        from utils.cache import get_cache_sync, diagnosticar_cache
        
        # Diagn√≥stico detalhado
        stats = diagnosticar_cache()
        logger.info("Estat√≠sticas do cache:")
        logger.info(f"  Status: {stats.get('status', 'N/A')}")
        logger.info(f"  Total entidades: {stats.get('total_entidades', 0)}")
        logger.info(f"  Dom√≠nios: {stats.get('contagem_por_dominio', {})}")
        logger.info(f"  √öltima atualiza√ß√£o: {stats.get('ultima_atualizacao', 'N/A')}")
        
        # Cache atual
        cache_atual = get_cache_sync()
        if cache_atual:
            entidades = cache_atual.get("entidades", [])
            logger.info(f"‚úÖ Cache carregado com {len(entidades)} entidades")
            return len(entidades) > 0
        else:
            logger.warning("‚ö†Ô∏è Cache vazio ou n√£o carregado")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Erro ao verificar cache: {e}")
        return False

async def main():
    """Executa o processo completo"""
    logger.info("üöÄ INICIANDO PROCESSO DE ATUALIZA√á√ÉO FOR√áADA DO CACHE")
    
    # Verifica estado inicial
    initial_state = await verify_cache()
    logger.info(f"Estado inicial do cache: {'‚úÖ OK' if initial_state else '‚ùå Vazio'}")
    
    # For√ßa atualiza√ß√£o
    success = await force_cache_update()
    
    # Verifica estado final
    if success:
        final_state = await verify_cache()
        logger.info(f"Estado final do cache: {'‚úÖ OK' if final_state else '‚ùå Ainda vazio'}")
        
        if final_state:
            logger.info("üéâ CACHE ATUALIZADO COM SUCESSO!")
        else:
            logger.error("üí• CACHE AINDA EST√Å VAZIO AP√ìS ATUALIZA√á√ÉO!")
    else:
        logger.error("üí• FALHA NA ATUALIZA√á√ÉO DO CACHE!")

if __name__ == "__main__":
    asyncio.run(main())
