#!/usr/bin/env python3
"""
Script para corrigir erros espec√≠ficos no backend do Analyst-IA
Vers√£o econ√¥mica para reduzir consumo de tokens
"""

import os
import sys
import re
import shutil
import platform
import subprocess
import json
from datetime import datetime
from pathlib import Path

def print_header(message):
    """Imprime uma mensagem de cabe√ßalho formatada"""
    print("\n" + "=" * 80)
    print(f" {message} ".center(80, "="))
    print("=" * 80)

def configurar_limite_tokens():
    """Configura um limite di√°rio de tokens para economia"""
    token_file = Path("backend/logs/token_usage.json")
    
    if token_file.exists():
        print("‚úì Arquivo de controle de tokens j√° existente")
        return True
    
    try:
        # Cria diret√≥rio se n√£o existir
        token_file.parent.mkdir(parents=True, exist_ok=True)
        
        # Cria arquivo inicial com limite di√°rio
        with open(token_file, "w") as f:
            f.write('{"date": "2025-06-26", "tokens": 0}')
        
        print("‚úì Arquivo de controle de tokens criado com limite di√°rio de 5000 tokens")
        return True
    except Exception as e:
        print(f"‚úó Erro ao configurar limite de tokens: {e}")
        return False

def verificar_importacoes_backend():
    """Verifica importa√ß√µes problem√°ticas no backend"""
    print_header("Verificando importa√ß√µes no backend")
    
    backend_file = Path("backend/unified_backend.py")
    if not backend_file.exists():
        print(f"‚úó Arquivo {backend_file} n√£o encontrado")
        return False
    
    try:
        with open(backend_file, "r", encoding="utf-8") as f:
            content = f.read()
        
        if "from utils.openai_connector import gerar_resposta_ia, truncate_text_tokens" in content:
            print("‚úó Importa√ß√£o problem√°tica 'truncate_text_tokens' encontrada")
            
            # Corrige a importa√ß√£o
            corrected = content.replace(
                "from utils.openai_connector import gerar_resposta_ia, truncate_text_tokens",
                "from utils.openai_connector import gerar_resposta_ia"
            )
            
            # Salva a corre√ß√£o
            with open(backend_file, "w", encoding="utf-8") as f:
                f.write(corrected)
            
            print("‚úì Importa√ß√£o corrigida")
        else:
            print("‚úì Importa√ß√µes est√£o corretas")
        
        return True
    except Exception as e:
        print(f"‚úó Erro ao verificar importa√ß√µes: {e}")
        return False

def verificar_endpoint_health():
    """Verifica se o endpoint /api/health est√° implementado"""
    print_header("Verificando endpoint /api/health")
    
    backend_file = Path("backend/unified_backend.py")
    if not backend_file.exists():
        print(f"‚úó Arquivo {backend_file} n√£o encontrado")
        return False
    
    try:
        with open(backend_file, "r", encoding="utf-8") as f:
            content = f.read()
        
        if "@app.get(\"/api/health\")" in content:
            print("‚úì Endpoint /api/health j√° existe")
            return True
        
        print("‚úó Endpoint /api/health n√£o encontrado, implementando...")
        
        # Localiza um bom ponto para inserir o endpoint
        pos = content.find("# Endpoints")
        if pos == -1:
            pos = content.find("@app.on_event(\"startup\")")
        
        if pos > 0:
            health_endpoint = """
@app.get("/api/health")
async def health_check():
    # Endpoint para verificar se o servi√ßo est√° operacional
    cache = await get_cache()
    cache_status = {
        "exists": bool(cache),
        "entities": len(cache.get("entidades", [])) if cache else 0,
        "last_update": cache.get("timestamp", "nunca") if cache else "nunca"
    }
    
    return {
        "status": "operational",
        "timestamp": datetime.now().isoformat(),
        "cache": cache_status,
        "version": "2.0.1"
    }

"""
            # Troca triple quotes para n√£o confundir com docstring
            health_endpoint = health_endpoint.replace('"""', "'''")
            
            # Adiciona importa√ß√£o do datetime se n√£o existir
            if "from datetime import datetime" not in content:
                content = content.replace(
                    "import logging",
                    "import logging\nfrom datetime import datetime"
                )
            
            # Insere ap√≥s o marcador encontrado
            end_pos = content.find("\n", pos)
            new_content = content[:end_pos+1] + health_endpoint + content[end_pos+1:]
            
            with open(backend_file, "w", encoding="utf-8") as f:
                f.write(new_content)
            
            print("‚úì Endpoint /api/health implementado")
            return True
        
        print("‚úó N√£o foi poss√≠vel encontrar um bom local para inserir o endpoint")
        return False
    except Exception as e:
        print(f"‚úó Erro ao verificar endpoint health: {e}")
        return False

def iniciar_backend():
    """Tenta iniciar o backend para teste"""
    print_header("Iniciando backend para teste")
    
    try:
        # Verifica se o diret√≥rio do backend existe
        if not Path("backend").exists():
            print("‚úó Diret√≥rio backend n√£o encontrado")
            return False
        
        # Verifica se o arquivo unified_backend.py existe
        if not Path("backend/unified_backend.py").exists():
            print("‚úó Arquivo unified_backend.py n√£o encontrado")
            return False
        
        # Executa o backend em segundo plano
        print("Iniciando backend unificado...")
        
        if platform.system() == "Windows":
            process = subprocess.Popen(
                [sys.executable, "unified_backend.py"],
                cwd="backend",
                creationflags=subprocess.CREATE_NEW_CONSOLE
            )
        else:
            process = subprocess.Popen(
                [sys.executable, "unified_backend.py"],
                cwd="backend"
            )
        
        print(f"‚úì Backend iniciado com PID: {process.pid}")
        print("‚úì Acesse o backend em: http://localhost:8000")
        print("‚úì Para iniciar o frontend, abra outro terminal e execute:")
        print("  cd frontend")
        print("  npm run dev")
        
        return True
    except Exception as e:
        print(f"‚úó Erro ao iniciar backend: {e}")
        return False

def criar_diretorios_necessarios():
    """Cria os diret√≥rios necess√°rios para o sistema funcionar corretamente"""
    print_header("Criando diret√≥rios necess√°rios")
    
    # Lista de diret√≥rios que devem existir
    diretorios = [
        "backend/logs",
        "backend/historico",
        "relatorios"
    ]
    
    for dir_path in diretorios:
        path = Path(dir_path)
        if path.exists():
            print(f"‚úì Diret√≥rio {dir_path} j√° existe")
        else:
            try:
                path.mkdir(parents=True, exist_ok=True)
                print(f"‚úì Diret√≥rio {dir_path} criado com sucesso")
            except Exception as e:
                print(f"‚úó Erro ao criar diret√≥rio {dir_path}: {e}")
    
    return True

def main():
    print_header("Corre√ß√£o R√°pida do Sistema Analyst-IA")
    print("Script econ√¥mico para corrigir o backend e reduzir consumo de tokens")
    
    # Verifica o diret√≥rio atual
    cwd = os.getcwd()
    if not os.path.basename(cwd) == "Analyst_IA":
        print(f"Diret√≥rio atual: {cwd}")
        print("‚ö†Ô∏è  AVISO: Este script deve ser executado na pasta raiz do projeto Analyst_IA")
        
        response = input("Continuar mesmo assim? (s/n): ")
        if response.lower() not in ["s", "sim", "y", "yes"]:
            return 1
    
    # Executa as corre√ß√µes
    steps = [
        ("Criar diret√≥rios necess√°rios", criar_diretorios_necessarios),
        ("Configurar limite de tokens", configurar_limite_tokens),
        ("Verificar importa√ß√µes no backend", verificar_importacoes_backend),
        ("Verificar endpoint /api/health", verificar_endpoint_health),
        ("Iniciar backend para teste", iniciar_backend)
    ]
    
    results = []
    for name, func in steps:
        print(f"\nExecutando: {name}")
        success = func()
        results.append((name, success))
    
    # Resumo
    print_header("Resumo das corre√ß√µes")
    for name, success in results:
        status = "‚úì" if success else "‚úó"
        print(f"{status} {name}")
    
    if all(success for _, success in results):
        print("\n‚úì Todas as corre√ß√µes foram aplicadas com sucesso!")
    else:
        print("\n‚ö†Ô∏è  Algumas corre√ß√µes n√£o puderam ser aplicadas.")
    
    print("\nüìã Instru√ß√µes para uso:")
    print("1. O backend j√° foi iniciado em http://localhost:8000")
    print("2. Para o frontend, abra outro terminal e execute:")
    print("   cd frontend")
    print("   npm run dev")
    print("3. Acesse o sistema em http://localhost:5173")
    
    return 0

if __name__ == "__main__":
    sys.exit(main())
