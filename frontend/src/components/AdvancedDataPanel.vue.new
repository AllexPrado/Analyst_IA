<template>
  <div class="advanced-data-panel">
    <div v-if="hasData" class="bg-gray-800 rounded-xl shadow-lg overflow-hidden">
      <!-- Tabs for different data types -->
      <div class="flex border-b border-gray-700">
        <div 
          v-for="(tab, index) in availableTabs" 
          :key="index" 
          @click="activeTab = tab.id" 
          class="px-4 py-3 cursor-pointer text-sm font-medium transition-all"
          :class="activeTab === tab.id ? 'text-blue-400 border-b-2 border-blue-400' : 'text-gray-400 hover:text-gray-300'"
        >
          <font-awesome-icon :icon="tab.icon" class="mr-2" />
          {{ tab.label }}
          <span 
            v-if="tab.count" 
            class="ml-2 px-2 py-0.5 text-xs rounded-full"
            :class="tab.count > 0 ? 'bg-blue-900 text-blue-200' : 'bg-gray-700 text-gray-400'"
          >{{ tab.count }}</span>
        </div>
      </div>
      
      <!-- Logs Panel -->
      <div v-if="activeTab === 'logs'" class="p-4">
        <div v-if="logsData && logsData.length > 0" class="space-y-3">
          <div class="flex justify-between items-center mb-2">
            <h3 class="text-lg font-semibold text-white">Logs</h3>
            <span class="text-xs bg-blue-900 text-blue-200 px-2 py-1 rounded-full">{{ logsData.length }} registros</span>
          </div>
          
          <div class="max-h-[400px] overflow-y-auto">
            <div 
              v-for="(log, idx) in logsData" 
              :key="idx" 
              class="log-entry p-3 text-sm border-l-4 mb-2 rounded-r-lg bg-gray-900"
              :class="getLogSeverityClass(log.severity || log.level)"
            >
              <div class="flex justify-between text-xs text-gray-400 mb-1">
                <span>{{ formatTimestamp(log.timestamp) }}</span>
                <span class="px-2 py-0.5 rounded-full" :class="getLogSeverityBadgeClass(log.severity || log.level)">
                  {{ log.severity || log.level || 'INFO' }}
                </span>
              </div>
              <div class="text-white">{{ log.message }}</div>
              
              <div v-if="log.attributes || log.context" class="mt-2 pt-2 border-t border-gray-800">
                <pre class="text-xs text-gray-400 whitespace-pre-wrap">{{ JSON.stringify(log.attributes || log.context, null, 2) }}</pre>
              </div>
            </div>
          </div>
        </div>
        <div v-else class="text-gray-400 p-4 text-center">
          <font-awesome-icon icon="info-circle" class="mr-2" />
          Nenhum dado de log disponível
        </div>
      </div>
      
      <!-- Other data panels omitted for brevity -->
      
    </div>
    
    <div v-else class="bg-gray-800 rounded-xl shadow-lg p-6">
      <div class="flex flex-col items-center justify-center">
        <font-awesome-icon icon="info-circle" class="text-3xl text-gray-600 mb-3" />
        <p class="text-gray-400 text-center">{{ noDataMessage }}</p>
      </div>
    </div>
  </div>
</template>

<script>
export default {
  name: 'AdvancedDataPanel',
  props: {
    entityData: {
      type: Object,
      default: () => ({})
    },
    noDataMessage: {
      type: String,
      default: 'Dados avançados não disponíveis para esta entidade'
    }
  },
  data() {
    return {
      activeTab: 'logs' // Default active tab
    }
  },
  computed: {
    hasData() {
      return this.logsData.length > 0 || 
        this.tracesData.length > 0 || 
        this.queriesData.length > 0 ||
        this.errorsData.length > 0;
    },
    logsData() {
      return this.entityData?.logs || [];
    },
    tracesData() {
      return this.entityData?.traces || [];
    },
    queriesData() {
      return this.entityData?.queries || [];
    },
    errorsData() {
      return this.entityData?.errors || [];
    },
    availableTabs() {
      return [
        { id: 'logs', label: 'Logs', icon: 'file-alt', count: this.logsData.length },
        { id: 'traces', label: 'Traces', icon: 'project-diagram', count: this.tracesData.length },
        { id: 'queries', label: 'Queries SQL', icon: 'database', count: this.queriesData.length },
        { id: 'errors', label: 'Erros', icon: 'exclamation-triangle', count: this.errorsData.length }
      ];
    }
  },
  methods: {
    formatTimestamp(timestamp) {
      if (!timestamp) return 'N/A';
      
      // Check if timestamp is a number (Unix timestamp)
      if (typeof timestamp === 'number') {
        // Convert to date object
        const date = new Date(timestamp);
        return date.toLocaleString();
      }
      
      // Check if timestamp is ISO format
      try {
        const date = new Date(timestamp);
        return date.toLocaleString();
      } catch (e) {
        return timestamp; // Return as is if not parseable
      }
    },
    formatDuration(duration) {
      if (!duration) return 'N/A';
      
      // Convert to number if string
      const durationNum = parseFloat(duration);
      
      // Check if the value is in milliseconds (typical for traces)
      if (durationNum < 1000) {
        return `${durationNum.toFixed(2)} ms`;
      }
      
      // Convert to seconds
      return `${(durationNum / 1000).toFixed(2)} s`;
    },
    getLogSeverityClass(severity) {
      severity = (severity || '').toUpperCase();
      
      switch (severity) {
        case 'ERROR':
        case 'CRITICAL':
        case 'FATAL':
          return 'border-red-600';
        case 'WARNING':
        case 'WARN':
          return 'border-yellow-600';
        case 'INFO':
          return 'border-blue-600';
        case 'DEBUG':
          return 'border-green-600';
        default:
          return 'border-gray-600';
      }
    },
    getLogSeverityBadgeClass(severity) {
      severity = (severity || '').toUpperCase();
      
      switch (severity) {
        case 'ERROR':
        case 'CRITICAL':
        case 'FATAL':
          return 'bg-red-900 text-red-200';
        case 'WARNING':
        case 'WARN':
          return 'bg-yellow-900 text-yellow-200';
        case 'INFO':
          return 'bg-blue-900 text-blue-200';
        case 'DEBUG':
          return 'bg-green-900 text-green-200';
        default:
          return 'bg-gray-700 text-gray-300';
      }
    }
  }
}
</script>

<style scoped>
/* Custom scrollbar for the panels */
.max-h-\[400px\] {
  scrollbar-width: thin;
  scrollbar-color: #4a5568 #1a202c;
}

.max-h-\[400px\]::-webkit-scrollbar {
  width: 8px;
}

.max-h-\[400px\]::-webkit-scrollbar-track {
  background: #1a202c;
}

.max-h-\[400px\]::-webkit-scrollbar-thumb {
  background-color: #4a5568;
  border-radius: 4px;
}
</style>
